#!/bin/sh
# Disable unused variable.
#   shellcheck disable=SC2034
# Disable source following.
#   shellcheck disable=SC1090,SC1091
# Disable optional arguments.
#   shellcheck disable=SC2120
# Disable which non-standard.
#   shellcheck disable=SC2230

# {{{ Check test variables

if [ -z "${TEST_SCRIPT:-}" ]; then
    echo "\$TEST_SCRIPT not set" >&2
    exit 1
fi

if [ -z "${TEST_DIR:-}" ]; then
    echo "\$TEST_DIR not set" >&2
    exit 1
fi

if [ "$TEST_DIR" != "$(dirname -- "$TEST_SCRIPT")" ]; then
    echo "\$TEST_DIR is not valid, expected $(dirname -- "$TEST_SCRIPT")" \
         ", got $TEST_DIR" >&2
    exit 1
fi

# }}}
# {{{ Source pyvenv-activate.sh

. "$TEST_DIR/../pyvenv-activate.sh"

# }}}
# {{{ Set common variables and options

# Use absolute path for SHUNIT_PARENT
SHUNIT_PARENT="$(cd -P -- "$TEST_DIR" \
    && printf '%s\n' \
    "$(pwd -P)/$(basename -- "$TEST_SCRIPT")")"


# Set shwordsplit for zsh
[ -n "${ZSH_VERSION:-}" ] && setopt shwordsplit


# }}}
# {{{ Setup pipenv environments


# Use all default Pipenv environment variables.
unset PIPENV_CACHE_DIR
unset PIPENV_COLORBLIND
unset PIPENV_DEFAULT_PYTHON_VERSION
unset PIPENV_DONT_LOAD_ENV
unset PIPENV_DONT_USE_ASDF
unset PIPENV_DONT_USE_PYENV
unset PIPENV_DOTENV_LOCATION
unset PIPENV_EMULATOR
unset PIPENV_HIDE_EMOJIS
unset PIPENV_IGNORE_VIRTUALENVS
unset PIPENV_INSTALL_TIMEOUT
unset PIPENV_MAX_DEPTH
unset PIPENV_MAX_RETRIES
unset PIPENV_MAX_ROUNDS
unset PIPENV_MAX_SUBPROCESS
unset PIPENV_NOSPIN
unset PIPENV_NO_INHERIT
unset PIPENV_PIPFILE
unset PIPENV_PYPI_MIRROR
unset PIPENV_RESOLVE_VCS
unset PIPENV_SHELL
unset PIPENV_SHELL_FANCY
unset PIPENV_SKIP_LOCK
unset PIPENV_SPINNER
unset PIPENV_TIMEOUT
unset PIPENV_VENV_IN_PROJECT
unset PIPENV_YES
unset PYTHONPATH

# Except these ones.
export PIPENV_IGNORE_VIRTUALENVS=1
export PIPENV_VENV_IN_PROJECT=1

# Use all default Poetry environment variables.
unset POETRY_CACHE_DIR
unset POETRY_EXPERIMENTAL_NEW_INSTALLER
unset POETRY_INSTALLER_PARALLE
unset POETRY_VIRTUALENVS_CREATE
unset POETRY_VIRTUALENVS_PATH

# Except this one.
export POETRY_VIRTUALENVS_IN_PROJECT=1

th_setup_envs_tmpdir() {
    echo "Setting up environments temporary directory '$TEST_ENVS_TMPDIR'" >&2

    cp -R -- "$TEST_DIR/envs/." "$TEST_ENVS_TMPDIR"

    for th_env_ in "$TEST_ENVS_TMPDIR/pipenv"/*; do
       (cd -- "$th_env_" && pipenv install) || return 1
    done

    for th_env_ in "$TEST_ENVS_TMPDIR/poetry"/*; do
       (cd -- "$th_env_" && poetry install) || return 1
    done

    touch "$TEST_ENVS_TMPDIR/.setup" || return 1
    echo
    unset th_env_

    return 0
}

# }}}
# {{{ Useful functions

th_get_python_path() {
    cmd_prefix="${1:-}"

    # Look for the first python in python, python3 and python2.
    for py_cmd in python python3 python2; do
        if py_path="$($cmd_prefix which $py_cmd)"; then
            echo "$py_path"
            return 0
        fi
    done
    return 1
}

th_get_pipenv_venv() {
    pipenv --venv 2>/dev/null | cat
}

th_get_poetry_venv() {
    if venv="$(poetry env info -p 2>/dev/null)"; then
        # Print only the output if the command is successful.
        echo "$venv"
    fi
}

th_get_env_var() {
    env_var="$1"
    cmd_prefix="${2:-}"

    $cmd_prefix python3 -c "import os; print(os.environ.get('$env_var', ''))"
}

# }}}
# {{{ Default setup/teardown functions

th_oneTimeSetUp() {
    TEST_START_PWD="$(pwd -P)"

    if [ -z "$TEST_ENVS_TMPDIR" ]; then
        TEST_ENVS_TMPDIR="$SHUNIT_TMPDIR/envs"
        mkdir -- "$TEST_ENVS_TMPDIR" || return 1
    fi

    if ! [ -f "$TEST_ENVS_TMPDIR/.setup" ]; then
        th_setup_envs_tmpdir || return 1
    fi

    TEST_ENVS_PIPENV="$TEST_ENVS_TMPDIR/pipenv"
    TEST_ENVS_POETRY="$TEST_ENVS_TMPDIR/poetry"

    HOST_PYTHON_PATH="$(th_get_python_path '')"
    return 0
}
oneTimeSetUp() {
    th_oneTimeSetUp
}


th_oneTimeTearDown() {
    :
}
oneTimeTearDown() {
    th_oneTimeTearDown
}


th_setUp() {
    # Get back to tmpdir every time we start or exit test to provide
    # consistency.
    cd -- "$TEST_START_PWD" || return 1
}
setUp() {
    th_setUp
}


th_tearDown() {
    th_setUp
}
tearDown() {
    th_tearDown
}

# }}}
# {{{ Auto activate functions

th_auto_activate_check_proj_enable() {
    _TH_AUTO_ACTIVATE_CHECK_PROJ_ACTIVE=1
}

th_auto_activate_check_proj_disable() {
    unset _TH_AUTO_ACTIVATE_CHECK_PROJ_ACTIVE
}

th_auto_activate_check_proj_cd() {
    cd "$@" || return 1

    if [ -n "$_TH_AUTO_ACTIVATE_CHECK_PROJ_ACTIVE" ]; then
        pyvenv_auto_activate_check_proj
    fi
}

th_pyvenv_auto_activate_check_proj() {
    "th_test_pyvenv_auto_activate_$1" \
        "th_auto_activate_check_proj_enable" \
        "th_auto_activate_check_proj_disable" \
        "th_auto_activate_check_proj_cd"
}

test_pyvenv_auto_activate_check_proj_pipenv() {
    th_pyvenv_auto_activate_check_proj "pipenv"
}

test_pyvenv_auto_activate_check_proj_poetry() {
    th_pyvenv_auto_activate_check_proj "poetry"
}

th_pyvenv_auto_activate_redefine_cd() {
    "th_test_pyvenv_auto_activate_$1" \
        "_pyvenv_auto_activate_enable_redefine_cd" \
        "_pyvenv_auto_activate_disable_redefine_cd" \
        "cd"
}

test_pyvenv_auto_activate_redefine_cd_pipenv() {
    th_pyvenv_auto_activate_redefine_cd "pipenv"
}

test_pyvenv_auto_activate_redefine_cd_poetry() {
    th_pyvenv_auto_activate_redefine_cd "poetry"
}

th_auto_activate_bash_cd() {
    cd "$@" || return 1

    _saved_ifs="$IFS"
    IFS=";"
    for cmd in $PROMPT_COMMAND; do
        "$cmd"
    done
    IFS="$_saved_ifs"
    unset _saved_ifs
}

th_pyvenv_auto_activate_bash_prompt() {
    "th_test_pyvenv_auto_activate_$1" \
        "pyvenv_auto_activate_enable prompt" \
        "pyvenv_auto_activate_disable" \
        "th_auto_activate_bash_cd"
}

test_pyvenv_auto_activate_bash_prompt_pipenv() {
    th_pyvenv_auto_activate_bash_prompt "pipenv"
}

test_pyvenv_auto_activate_bash_prompt_poetry() {
    th_pyvenv_auto_activate_bash_prompt "poetry"
}

th_pyvenv_auto_activate_bash_chpwd() {
    "th_test_pyvenv_auto_activate_$1" \
        "pyvenv_auto_activate_enable chpwd" \
        "pyvenv_auto_activate_disable" \
        "th_auto_activate_bash_cd"
}

test_pyvenv_auto_activate_bash_chpwd_pipenv() {
    th_pyvenv_auto_activate_bash_chpwd "pipenv"
}

test_pyvenv_auto_activate_bash_chpwd_poetry() {
    th_pyvenv_auto_activate_bash_chpwd "poetry"
}

th_auto_activate_zsh_cd() {
    cd "$@" || return 1

    # shellcheck disable=SC2154
    for cmd in $chpwd_functions; do
        "$cmd"
    done

    # shellcheck disable=SC2154
    for cmd in $precmd_functions; do
        "$cmd"
    done
}

th_pyvenv_auto_activate_zsh_prompt() {
    "th_test_pyvenv_auto_activate_$1" \
        "pyvenv_auto_activate_enable prompt" \
        "pyvenv_auto_activate_disable" \
        "th_auto_activate_zsh_cd"
}

test_pyvenv_auto_activate_zsh_prompt_pipenv() {
    th_pyvenv_auto_activate_zsh_prompt "pipenv"
}

test_pyvenv_auto_activate_zsh_prompt_poetry() {
    th_pyvenv_auto_activate_zsh_prompt "poetry"
}

th_pyvenv_auto_activate_zsh_chpwd() {
    "th_test_pyvenv_auto_activate_$1" \
        "pyvenv_auto_activate_enable chpwd" \
        "pyvenv_auto_activate_disable" \
        "th_auto_activate_zsh_cd"
}

test_pyvenv_auto_activate_zsh_chpwd_pipenv() {
    th_pyvenv_auto_activate_zsh_chpwd "pipenv"
}

test_pyvenv_auto_activate_zsh_chpwd_poetry() {
    th_pyvenv_auto_activate_zsh_chpwd "poetry"
}

th_pyvenv_auto_activate_suite() {
    suite_addTest 'test_pyvenv_auto_activate_check_proj_pipenv'
    suite_addTest 'test_pyvenv_auto_activate_check_proj_poetry'
    suite_addTest 'test_pyvenv_auto_activate_redefine_cd_pipenv'
    suite_addTest 'test_pyvenv_auto_activate_redefine_cd_poetry'
    if [ -n "$BASH_VERSION" ]; then
        suite_addTest 'test_pyvenv_auto_activate_bash_prompt_pipenv'
        suite_addTest 'test_pyvenv_auto_activate_bash_prompt_poetry'
        suite_addTest 'test_pyvenv_auto_activate_bash_chpwd_pipenv'
        suite_addTest 'test_pyvenv_auto_activate_bash_chpwd_poetry'
    fi
    if [ -n "$ZSH_VERSION" ]; then
        suite_addTest 'test_pyvenv_auto_activate_zsh_prompt_pipenv'
        suite_addTest 'test_pyvenv_auto_activate_zsh_prompt_poetry'
        suite_addTest 'test_pyvenv_auto_activate_zsh_chpwd_pipenv'
        suite_addTest 'test_pyvenv_auto_activate_zsh_chpwd_poetry'
    fi
}

# }}}
